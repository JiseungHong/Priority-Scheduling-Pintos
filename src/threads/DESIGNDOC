			+--------------------+
			|        CSE231      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mohit     Juneja <mohit17067@iiitd.ac.in>
Aishwarya Kumar  <aishwarya17011@iiitd.ac.in>
Deepak    Nigam <deepak17042@iiitd.ac.in>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

---- TEST CASES ----

>> Provide a list of failed test cases here. If none of them
>> are failing just mention, all tests are passing.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  "int64_t wakeup_time" :- 
  		A new member of thread struct. Defined in 'thread.h'.
  		This stores the time(in ticks) for a thread to wake
  		up. Initialized to 0.

  "static struct list sleeping_threads" :- 
  		A list of sleeping threads. Defined in 'timer.c'.
  		Stores thread in increasing order of their wakeup time.
  		If wakeup time is same, then stores according to priority.

  bool compare_time(struct list_elem *l1, struct list_elem *l2, void *aux) :-
  		A function in 'timer.c' to compare the wakeup time of two threads.
  		Used by "list_insert_orderd" to put the threads in increasing order
  		of their wakeup time in "sleeping_threads" list.

  void wakeup_thread() :-
  		A function in 'timer.c' to wakeup a sleeping thread on a timer tick.
  		Called on a timer_tick, wakes up all the sleeping threads on that tick
  		and unblock all threads.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
	
	In "timer_sleep()", wakeup_time is set for the current thread, thread is
	inserted in the "sleeping_threads" list and thread is blocked with 
	interrupts disabled. In thread_block(), new thread will be yielded based
	on priorities. 

	Interrupts are disabled while calling thread_block(), thus preventing
	interrupts to happen. Also interrupts are not disabled for a lot of time
	as required in an idle case.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?



---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
  
  NEWLY CREATED

  "bool is_donated" :-
      A new member of thread lock. Defined in 'synch.h'.
      True if thread holding the lock is in a donated state. Initialized to False.

  "int initial_priority" :- nnnnnnnnn

  bool compare_sema(struct list_elem *l1, struct list_elem *l2,void *aux) :-
      A new function in 'synch.c' Takes the semaphore elements of locks as arguments 
      and returns True if first arguments' threads' priority is bigger than that of second one.

  
  bool compare_priority(struct list_elem *l1, struct list_elem *l2, void *aux) :-
      A new function in 'thread.c' Takes the thread elements as arguments and 
      returns True if first threads' priority is bigger than that of second one.

  void sort_ready_list(void) :-
      A new function in 'thread.c'. Sorts the ready_list. 
  
  MODIFIED

  tid_t thread_create (const char *name, int priority, thread_func *, void *) :-
      A function in 'thread.c'. thread_yield() is called so that priority 
      scheduler schedules the thread with highest priority.

  void thread_init (void) :-
      A function in 'thread.c'. Initialising new members of struct thread.

  void thread_set_priority (int) :-nnnnnnnnnnn
      A function in 'thread.c'.

  void thread_unblock (struct thread *)
      A function in 'thread.c'. Insertion  of unblocked thread in ready_list
      now happens in sorted order.

  void thread_yield (void)
      A function in 'thread.c'. Insertion  of previous thread in ready_list
      now happens in sorted order.
  
  void cond_wait (struct condition *, struct lock *) :-
      A function in 'synch.c'. Insertion  of previous thread in waiting list of 
      condition variable now happens in sorted order.

  void cond_signal (struct condition *, struct lock *) :-
      A function in 'synch.c'. Ensuring sorted waiting list by calling sort on the 
      list.

  void sema_down (struct semaphore *) :-
      A function in 'synch.c'. Insertion  of  thread in waiting_list of semaphore.
      now happens in sorted order.

  void sema_up (struct semaphore *) :-
      A function in 'synch.c'. thread_yield() is called so that priority 
      scheduler schedules the thread with highest priority.

  void lock_init (struct lock *) :-
      A function in 'synch.c'. Initializes new members of lock struct.

  void lock_acquire (struct lock *) :-nnnnnnnnnnn
      A function in 'synch.c'.

  void lock_release (struct lock *) :-nnnnnnnnnnn
      A function in 'synch.c'.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
    
    To ensure that the highest priority thread wakes up first, the 
    implementation of insertion in each of the waiting lists of the semaphore
    and condition variables is modified. The 'list_push_back' function is replaced with  'list_ordered_insert'. 
    A new compare function 'compare_priority' is made that goes as argument to 'list_ordered_insert' and maintains the priorities of waiting list of semaphores. 
    A new compare function 'compare_sema' is made that goes as argument to 'list_ordered_insert' and maintains the priorities of waiting list of condition variables.
    If donation/un-donation takes place, the lists are sorted again to maintain order. It is always ensured that a thread yields only when ready_list is sorted.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

    

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?